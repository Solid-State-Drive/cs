드모르간의 법칙

a AND b == NOT(NOT a OR NOT b)

2진법

10진법이 기준인 이유는 사람 손가락이 10개이기 때문,


2진법의 가장 오른쪽 비트를 가장 작은 유효 비트(least significant bit)라고 부르고 가장 왼쪽의 비트를
가장 큰 유효 비트(most significant bit)라고 부른다. 보통 세 글자 줄임말*TLA(three letter acronym)을 사용하기
때문에, LSB와 MSB라고 부른다.


5028 - > 0001/0011/1010/0100 <13 bit>

2진수 덧셈 두비트를 더한값은 XOR, 올림은 AND

MSB에서 올림이 발생한다 = 오버플로(overflow)

컴퓨터에는 조건코드(또는 상태 코드) 레지스터(condition code register)라는 것이 있어서 몇 가지 이상한 정보를 담아둔다.
이 정보중에는 오버플로 비트(overflow bit)가 있고, 이 비트에는 MSB에서 발생한 올림값이 들어간다.
이 비트값을 보면 오버플로가 발생했는지 알 수 있다.

MSB 위쪽에서 1을 빌려오는 경우를 언더플로(underflow)라고 부른다. 이에 해당하는 조건코드도 컴퓨터에 들어 있다.

2진수 음수를 표현하는데 MSB를 음수 부호로 사용하고 나머지를 양수로 표현하는 부호와 크기 표현법은 잘 쓰이지 않는다.
비트를 낭비하고 두 영 표기법 중 하나를 다른 숫자를 표기하는데 사용하는 편이 더 낫다.

XOR과 AND를 통한 덧셈 계산을 사용할 수가 없다.

음수를 표현하는 또 다른 방법으로는 양수의 모든 비트를 뒤집는 방법이 있다. 1의 보수 표현법이라고 부른다.

0010 +2
1110 -1
----
0000 0
0001 1 순환올림
----
0001 +1

이 방법도 순환 올림을 처리하기 위한 하드웨어를 추가해야 하기 때문에 그다지 좋은 해법은 아니다.


2의 보수표현법은 모든 비트를 뒤집고 1을 더한다

0의 중복이 없다



2진수의 음수 표현법에 따라 1111이 -1 -7 -0이 될수도 있기 때문에 자기가 사용하는 

것이 어떤것인지 잘 알고 있어야 한다.





고정소수점 표현

소수점이 고정되에 왼쪽 정수 표현 오른쪽 소수점 이하 실수 표현을 하는 방식



잘 작동하기는 하지만 쓸모 있는 범위의 실숫값을 표현하기 위해 필요한

비트 개수가 너무 많기 때문에, 범용 컴퓨터에서 이런 방식을 사용하는 경우는 드물다.

디지털 신호 처리 장치(DSP, digital signal processor)등 특별한 목적에 쓰이는 일부

컴퓨터에는 여전히 쓰이긴 한다. 그리고 유용한 경우가 따로 있다.



범용 목적은 넓은 범위의 수를 표현할 수 있어야한다.



부동소수점 표현



과학적 표기법에서는 10진 소수점 왼쪽이 한 자리뿐인 소수에 10을 몇 번

거듭제곱한 값을 곱하는 방식으로 소수를 표현한다.



예를 들어 과학적 표기법에서는 0.0012 대신 1.2 x 10 -3(윗첨자,제곱) 이라고 쓰며

이 값은 1.2 x 0.001 이므로 0.0012와 같다. 2진법으로 표기할 때는 10이 아닌 2를

밑으로 한다는 점만 다를 뿐이다. 따라서 가수 부분은 2진 소수, 지수 부분은

2의 거듭제곱 횟수를 표현한다.



부동 소수점의 표현법의 비효율성으로 비트 조합 중에 낭비되는 부분이 많다.

0을 표현하는 방법은 네가지나 되고, 1,2,4를 표현하는 방법도 두가지씩 있다.

비트 패턴이 가능한 모든 수를 표현히자는 못한다. 지수가 커질수록

가수의 한 패턴과 다른 패턴 사이의 값 차이가 커진다. 이로 인해 0.5와 0.5를

더하면 1.0을 얻을수 있지만 6.5를 표현하는 비트 패턴이 없기 때문에 0.5와 6.0을 

더할 수는 없다는 부작용이 생긴다.



IEEE 부동 소수점 수 표준

똑같은 비트를 사용하더라도 정밀도를 가능한 한 높이고 싶다. 한가지 트릭은 정규화다. 
정규화는 가수를 조정해서 맨 앞에 0이 없도록 하는것. 이런식으로 가수를 조정하려면 지수도 조정해야한다.

두번째 트릭은 dec사에서 고안한것으로, 가수의 맨 왼쪽 비트가 1이라는 사실을 알고 있으므로 이를 생략하는 것.
이로 인해 가수에 1비트를 더 사용할 수 있다.

기본 정밀도 부동소수점과 2배 정밀도 부동소수점 수가 자주 쓰인다는 사실은 알아둬야 한다.


아스키 코드

수와 마찬가지로 텍스트를 표현하는 방법의 경우에도 몇 가지 아이디어가 서로 경쟁했다. 
승자는 정보 교환을 위한 미국 표준 코드 ASCII(American Standard Code for Information Interchange)
아스키는 키보드에 있는 모든 기호에 대해 7비트 수 값을 할당했다.


유니코드 변환 형식 8비트
컴퓨터는 7비트 값을 처리하도록 설계되지 않았기 때문에 8비트를 사용해 아스키 문자를 저장한다.
인코딩은 다른 비트 패턴을 표현하기 위해 사용하는 비트 패턴을 뜻한다. 우리는 비트 같은 추상화를 사용해
숫자를 표현하고, 숫자를 사용해 문자를 표현하며, 다시 숫자를 사용해 이런 (문자를 표현하는) 숫자를 표현한다.

유니코트 변확 형식 8비트(UTF-8)이라는 인코딩 방법이 하위 호환성과 효율성 때문에 가장 널리 쓰이고 있다.
UTF-8은 모든 아스키 문자를 8비트로 표현하기 때문에 아스키 데이터를 인코딩 할 때는 추가 공간이 필요하지 않다.
그리고 UTF-8은 아스키가 아닌 문자의 경우 아스키를 받아서 처리하는 프로그램이 깨지지 않는 방법으로 문자를 인코딩한다.

UTF-8은 문자를 8비트 덩어리(이를 옥텟 octet 이라고 부른다)의 시퀀스로 인코딩한다. UTF-8에서 교묘한 부분은 첫 번째 덩어리(8비트)
의 MSB쪽에 있는 비트들이 8비트 덩어리 시퀀스의 길이를 표현하고 덩어리의 맨 앞을 식별하기 쉽다는 데 있다.
영어의 경우 비 아스키 기호를 사용하는 언어보다 더 적은 용량으로 문자를 인코딩할 수 있기 때문에 영어 사용자에게는 이런 특성이
아주 편리하다.



























